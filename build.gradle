plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.145'
    id 'net.neoforged.gradle.mixin' version '7.0.145'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

base {
    archivesName = "${mod_name}-${mc_version}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        //jvmArgument "-Dmixin.debug.export=true"
        //jvmArgument "-Dmixin.debug.verbose=true"
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

mixin {
    config "${mod_id}.mixins.json"
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
    exclude '.cache/'
}

configurations {
    runtimeClasspath.extendsFrom localRuntime
}


repositories {
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        url = "https://api.modrinth.com/maven"
    }
    maven {
        url = "https://oss.sonatype.org/content/repositories/snapshots"
    }
    flatDir {
        dirs "libs"
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    compileOnly("mezz.jei:jei-${mc_version}-neoforge-api:${jei_version}")
    runtimeOnly("mezz.jei:jei-${mc_version}-neoforge:${jei_version}")
    runtimeOnly("maven.modrinth:spark:1.10.109-neoforge")

    //annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            mc_version      : mc_version,
            mc_version_range: mc_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

java {
    withSourcesJar()
    withJavadocJar()
}

void addLicense(jarTask) {
    jarTask.from('LICENSE') {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

addLicense(jar)